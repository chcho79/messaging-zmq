##
# EMF Unit Test build script
##

import os
from build_common.tools.RunTest import run_test

Import('env')

gtest_env = SConscript('#extlibs/gtest/SConscript')
lib_env = gtest_env.Clone()

if lib_env.get('RELEASE'):
    lib_env.AppendUnique(CCFLAGS=['-Os'])
else:
    lib_env.AppendUnique(CCFLAGS=['-g'])
    lib_env.AppendUnique(CPPDEFINES=['DEBUG_LOG'])


emf_test_env = lib_env.Clone()
target_os = emf_test_env.get('TARGET_OS')

######################################################################
# Build flags
######################################################################

emf_test_env.AppendUnique(LIBPATH=[lib_env.get('BUILD_DIR')])
emf_test_env.AppendUnique(LIBS=['emf', 'protobuf'])

if target_os not in ['windows']:
    emf_test_env.AppendUnique(
        CXXFLAGS=['-O2', '-g', '-Wall', '-fmessage-length=0', '-I/usr/local/include'])

if not emf_test_env.get('RELEASE'):
    emf_test_env.PrependUnique(LIBS=['gcov'])
    emf_test_env.AppendUnique(CXXFLAGS=['--coverage'])

emf_test_env.AppendUnique(CPPPATH=[
    '../extlibs/hippomocks/hippomocks',
	'../extlibs/zmq',
	'../protobuf',
    '../include',
    '../include/logger',
    '../src',
    '.'
])

######################################################################
# Build Test
######################################################################

emf_api_test_src = emf_test_env.Glob('./EMFAPITest.cpp')
emf_api_test = emf_test_env.Program('emf_api_test',
                                         emf_api_test_src)
Alias("emf_api_test", emf_api_test)
emf_test_env.AppendTarget('emf_api_test')

emf_pub_test_src = emf_test_env.Glob('./EMFPublisherTest.cpp')
emf_pub_test = emf_test_env.Program('emf_pub_test',
                                         emf_pub_test_src)
Alias("emf_pub_test", emf_pub_test)
emf_test_env.AppendTarget('emf_pub_test')

emf_sub_test_src = emf_test_env.Glob('./EMFSubscriberTest.cpp')
emf_sub_test = emf_test_env.Program('emf_sub_test',
                                         emf_sub_test_src)
Alias("emf_sub_test", emf_sub_test)
emf_test_env.AppendTarget('emf_sub_test')

if env.get('TEST') == '1':
	run_test(emf_test_env, '', 'unittests/emf_api_test', emf_api_test)
	run_test(emf_test_env, '', 'unittests/emf_pub_test', emf_pub_test)
	run_test(emf_test_env, '', 'unittests/emf_sub_test', emf_sub_test)
